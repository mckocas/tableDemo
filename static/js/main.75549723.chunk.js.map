{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","state","temp","target","name","value","setState","users","surname","in","addModal","updateModal","currentUser","addToggle","bind","assertThisInitialized","addUser","updateToggle","updateUser","k","n","s","i","updatedUser","isINumberValid","alert","isOnlyChar","newUser","usersCopy","concat","key","splice","String","test","digits","split","d10","Number","d11","sumOf10","evens","odds","forEach","d","index","_this2","react_default","a","createElement","className","karcin_ui","color","size","block","onClick","Modal","isOpen","toggle","ModalHeader","ModalBody","type","icon","id","IconColor","placeholder","onChange","required","ModalFooter","map","data","deleteUser","updateNew","requireText","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75549723.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Button,Input} from 'karcin-ui';\nimport {Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      users: [\n        {\n          name:'Mehmet Can',\n          surname:'Kocas',\n          in: 56516728808,\n        },\n      ],\n      temp:{\n        name: \"\",\n        surname: \"\",\n        in: -1,\n      },\n      addModal:false,\n      updateModal: false,\n      currentUser: -1,\n    }\n\n    this.addToggle = this.addToggle.bind(this);\n    this.addUser = this.addUser.bind(this);\n    this.updateToggle = this.updateToggle.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n  }\n\n  handleChange = (e) => {\n    let state = this.state.temp;\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n}\n\n  updateToggle() {\n    this.setState({\n      updateModal: !this.state.updateModal,\n    });\n    if(this.state.updateModal === true){\n      this.setState({\n        temp:{\n          name: \"\",\n          surname: \"\",\n          in: -1,\n        }        \n      })\n    }\n  }\n\n  updateNew(k,n,s,i){\n    let updatedUser = {\n      name: n,\n      surname: s,\n      in: i,\n    }\n    this.setState({currentUser : k,\n    temp: updatedUser});\n    this.updateToggle();\n  }\n\n  updateUser(){\n    let updatedUser = this.state.temp;\n    let users = this.state.users;\n    if(this.isINumberValid(updatedUser.in) === false){\n      alert(\"Geçerli bir TCK No girin.\");\n      return false;\n    }else if(this.isOnlyChar(updatedUser.name) === false || this.isOnlyChar(updatedUser.surname) === false){\n      alert(\"İsim ya da Soyisim geçersiz.(Numara ya da türkçe karakter olmadan giriniz.)\")\n      return false;\n    } \n    else{\n      users[this.state.currentUser] = updatedUser;\n      this.setState({\n      users:users,\n      temp:{\n          name: \"\",\n          surname: \"\",\n          in: -1,\n        }});\n    }\n    this.updateToggle();\n  }\n\n  addToggle() {\n    this.setState({\n      addModal: !this.state.addModal,\n      temp:{\n        name: \"\",\n        surname: \"\",\n        in: -1,\n      }\n    });\n  }\n\n  addUser(){\n    let newUser = this.state.temp;\n    let usersCopy = this.state.users.concat(newUser);\n\n    if((this.state.temp.in === -1 || this.state.temp.name === \"\" || this.state.temp.surname === \"\")){\n      alert(\"Boş bırakmayın.\")\n      return false;\n    }\n    else if(this.isINumberValid(this.state.temp.in) === false){\n      alert(\"Geçerli bir TCK No girin.\")\n      return false;\n    }\n    else if(this.isOnlyChar(newUser.name) === false || this.isOnlyChar(newUser.surname) === false){\n      alert(\"İsim ya da Soyisim geçersiz.(Numara ya da türkçe karakter olmadan giriniz.)\")\n      return false;\n    } \n    else{\n      this.setState({users: usersCopy,\n      temp:{\n        name: \"\",\n        surname: \"\",\n        in: -1,\n      }})\n    }\n    this.addToggle();\n\n  }\n\n  deleteUser(key){\n    let users = this.state.users;\n    users.splice(key, 1);\n    this.setState({users:users});\n  }\n\n  isOnlyChar(value){\n    value = String(value);\n    if(!/^[a-zA-Z]+$/.test(value)) return false;\n    else return true;\n  }\n\n  //isINumberValid functionu için https://gist.github.com/onury/7a380f906b1eb46dc2f0bb089caf7d12 adresinden yararlanılmıştır.\n  \n  isINumberValid(value) {\n    value = String(value);\n    // T.C. identity number should have 11 digits and first should be non-zero.\n    if (!(/^[1-9]\\d{10}$/).test(value)) return false;\n    var digits = value.split(''),\n        // store last 2 digits (10th and 11th) which are actually used for validation\n        d10 = Number(digits[9]),\n        d11 = Number(digits[10]),\n        // we'll also need the sum of first 10 digits for validation\n        sumOf10 = 0,\n        evens = 0,\n        odds = 0;\n    digits.forEach(function (d, index) {\n        d = Number(d);\n        if (index < 10) sumOf10 += d;\n        if (index < 9) {\n            if ((index + 1) % 2 === 0) {\n                evens += d;\n            } else {\n                odds += d;\n            }\n        }\n    });\n    // check if the unit-digit of the sum of first 10 digits equals to the 11th digit.\n    if (sumOf10 % 10 !== d11) return false;\n    // check if unit-digit of the sum of odds * 7 and evens * 9 is equal to 10th digit.\n    if (((odds * 7) + (evens * 9)) % 10 !== d10) return false;\n    // check if unit-digit of the sum of odds * 8 is equal to 11th digit.\n    if ((odds * 8) % 10 !== d11) return false;\n    return true;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Button color=\"primary\" className='addButton' size=\"lg\" block onClick={this.addToggle}>Yeni kayıt eklemek için tıklayınız.</Button>\n        <Modal isOpen={this.state.addModal} toggle={this.addToggle} className={this.props.className}>\n            <ModalHeader toggle={this.addToggle}>Yeni</ModalHeader>\n            <ModalBody>\n              <Input type=\"text\" icon=\"fa-check\" id=\"uN\" IconColor={'primary'} name=\"name\" placeholder='isim' onChange={this.handleChange} required/>\n              <Input type=\"text\" icon=\"fa-check\" id=\"uS\" IconColor={'primary'} name=\"surname\" placeholder='soyisim' onChange={this.handleChange}/>\n              <Input type=\"text\" icon=\"fa-check\" id=\"uI\" IconColor={'primary'} name=\"in\" placeholder='tck no' onChange={this.handleChange}/>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={this.addUser}>Ekle</Button>\n              <Button color=\"secondary\" onClick={this.addToggle}>Vazgeç</Button>\n            </ModalFooter>\n        </Modal>\n        <table>\n          <thead>\n            <tr className='tableHeader'>\n              <th>İsim</th>\n              <th>Soyisim</th>\n              <th>TCK No</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n          {this.state.users.map((data,i)=>{return (\n            <tr key={i}>\n              <td>{data.name}</td>\n              <td>{data.surname}</td>\n              <td>{data.in}</td>\n              <td className='addDeleteBts'>\n                <Button className='deleteBt' onClick={() => this.deleteUser(i)} color=\"danger\">Sil</Button>\n\n                <Button className='updateBt' onClick={() => this.updateNew(i,data.name,data.surname,data.in)} color=\"info\">Değiştir</Button>\n                <Modal isOpen={this.state.updateModal} toggle={this.updateToggle} className={this.props.className}>\n                  <ModalHeader toggle={this.updateToggle}>Güncelle</ModalHeader>\n                  <ModalBody>\n                    <Input type=\"text\" icon=\"fa-check\" id=\"uN\" IconColor={'primary'} name=\"name\" placeholder={this.state.temp.name} onChange={this.handleChange} requireText/>\n                    <Input type=\"text\" icon=\"fa-check\" id=\"uS\" IconColor={'primary'} name=\"surname\" placeholder={this.state.temp.surname} onChange={this.handleChange} requireText/>\n                    <Input type=\"text\" icon=\"fa-check\" id=\"uI\" IconColor={'primary'} name=\"in\" placeholder={this.state.temp.in} onChange={this.handleChange} requireText/>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button color=\"primary\" onClick={this.updateUser}>Güncelle</Button>\n                    <Button color=\"secondary\" onClick={this.updateToggle}>Vazgeç</Button>\n                  </ModalFooter>\n                </Modal>\n              </td>\n              </tr>\n          )})}\n          </tbody> \n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}